// @task:comp-sass

// @author Marcelo Miranda Carneiro - mcarneiro@gmail.com

// $gs-labels:               wide       normal;
// $gs-site-width:           1306px     100%;  // this
// // $gs-column-width:      74px       42px;   // or this. If Site width is set, column-width will be ignored
// $gs-column-num:           14         10;
// $gs-width-break-point:    1500px     900px;
// $gs-gutter-width:         10px       10px;


$gs-labels:               desktop  !default;
$gs-site-width:           1000px   !default;
//$gs-column-width:       84px     !default; //column-width is a optional way of setting units that should will override site-width
$gs-column-num:           14       !default;
$gs-width-break-point:    1700px   !default;
$gs-gutter-width:         10px     !default;

// PRIVATE //

// UTIL stuff
// Get values by label
@function gs-value ($label: nth($gs-labels, 1), $l: $gs-column-width) {
	$count: 0;
	@each $item in $gs-labels {
		$count: $count + 1;
		@if $label == $item {
			@if $count > length($l) {
				$count: 1;
			}
			@return nth($l, $count);
		}
	}
	@return null;
}

// convert to unit-less number
@function gs-to-number ($value) {
	@if unit($value) == "%" {
		@return $value / 1%;
	} @else if unit($value) == "px" {
		@return $value / 1px;
	} @else if unit($value) == "in" {
		@return $value / 1in;
	} @else if unit($value) == "em" {
		@return $value / 1em;
	}
}

@function gs-get-column-size ($media) {
	$gs-column-width: null !default;
	$gs-site-width: null !default;
	$cols: gs-value($media, $gs-column-num);
	$g: gutter(1, $media);
	$width: 0;

	@if $gs-column-width != null {
		$width: gs-value($media, $gs-column-width);
	} @else if $gs-site-width != null {
		// ([site width] - ([gutter] * ([columns] - 1))) / [columns]
		$width: (gs-value($media, $gs-site-width) - ($g * ($cols - 1))) / $cols;
	}
	@return $width;
}

// write a fixed (px) column based on "media" $gs-column-num
// $n:[total of columns] number of columns (if none is passed, consider a full-width column) 
// $media:[first defined media] the name of configured media to fetch data
// $extra:[0] extra size do be added (or removed) to the return value
@function gs-fixed-column ($n: gs-value($l: $gs-column-num), $media: gs-value($l: $gs-labels), $extra: 0) {
	$width: gs-get-column-size($media);
	$cols: gs-value($media, $gs-column-num);
	$g: gutter(1, $media);

	@if $n > $cols {
		$n: $cols
	}
	@return (($g + $width) * $n) - $g + $extra;
}

// write a fluid (%) column based on "media" $gs-column-num
// $n:[total of columns] number of columns (if none is passed, consider a full-width column) 
// $media:[first defined media] the name of configured media to fetch data
@function fluid-column ($n: gs-value($l: $gs-column-num), $media: gs-value($l: $gs-labels)) {

	$cols: gs-value($media, $gs-column-num);
	@if $n > $cols {
		$n: $cols
	}
	$width: $n / $cols * 100; //gs-to-number(gs-value($media, $gs-site-width))

	@return $width;
}


// PUBLIC //

// Get gutter value
@function gutter ($n: 1, $media: gs-value($l: $gs-labels)) {
	@return gs-to-number(gs-value($media, $gs-gutter-width)) * $n * 1px;
}

// Get column value
@function column ($n: gs-value($l: $gs-column-num), $media: gs-value($l: $gs-labels), $extra: 0) {
	$gs-column-width: null !default;
	$gs-site-width: null !default;
	$width: 0;

	// @debug "is? #{$media} / #{unit(gs-value($media, $gs-site-width))}";
	@if unit(gs-value($media, $gs-site-width)) == "%" {
		@return fluid-column($n, $media) * 1%;
	}
	@return gs-fixed-column($n, $media, $extra);
}

// get row css properties
@mixin row ($width: auto, $media: gs-value($l: $gs-labels)) {
	@if $width != auto {
		@if unit($width) == "%" {
			width: auto;
		} @else {
			width: $width + gutter($media: $media);
		}
	}
	margin-left: gutter(-1, $media);
}

// get media query css wrapper
@mixin media-query ($label: gs-value($l: $gs-labels), $media: screen) {
	$break-point: gs-value($label, $gs-width-break-point);
	@if $break-point == "auto" {
		@content
	} @else {
		@media #{$media} and (max-width: gs-value($label, $gs-width-break-point)) {
			@content
		}
	}
}

// generates classes with sizes
@mixin gs-classes ($media-list, $prefix) {
	@each $media in $media-list {
		$cols: gs-value($media, $gs-column-num);
		$gutter: gs-value($media, $gs-gutter-width);

		@include media-query($media) {
			@for $i from 1 to $cols+1 {
				.#{$prefix}#{$i} {
					$curr: column($i, $media: $media);
					width: $curr;
					@if unit($curr) != "%" {
						margin-left: $gutter;
					}
				}
			}
		}
	}
}