// @author Marcelo Miranda Carneiro - mcarneiro@gmail.com
// @version 0.5.1 https://github.com/mcarneiro/gs/#log-history

// Usage
// @include gs-register-grid(wide, 1306px, 14, 10px, auto);
// @include gs-column(1, wide);
// @include gs-gutter(1, wide);

$gs-first-registered: false;
$gs-labels:               desktop  !default;
$gs-site-width:           980px    !default;
$gs-column-num:           16       !default;
$gs-width-break-point:    1700px   !default;
$gs-gutter-width:         10px     !default;
$gs-verbose: true !default;

// PRIVATE //

// UTIL stuff
// Get values by label
@function gs-index-of ($item, $list) {
	$count: 0;
	$ret: -1;

	@each $curr in $list {
		$count: $count+1;
		@if $curr == $item {
			$ret: $count;
		}
	}
	@return $ret;
}

@function gs-label-exists ($grid) {
	$ret: 1;
	@if gs-index-of($grid, $gs-labels) < 0 {
		@if $gs-verbose {
			@warn "[gs-label-exists] Media \"#{$grid}\" was not found.";
		}
		$ret: 0;
	}
	@return $ret;
}

// Get values by label
@function gs-value ($label: nth($gs-labels, 1), $l: $gs-site-width) {
	$count: 0;
	$ret: 0;

	@if gs-label-exists($label) == 0 {
		@return $ret;
	}

	@each $item in $gs-labels {
		$count: $count + 1;
		@if $label == $item {
			@if $count > length($l) {
				$count: 1;
			}
			$ret: nth($l, $count);
		}
	}
	@return $ret;
}

// convert to unit-less number
@function gs-to-number ($value) {
	@if unit($value) == "%" {
		@return $value / 1%;
	} @else if unit($value) == "in" {
		@return $value / 1in;
	} @else if unit($value) == "cm" {
		@return $value / 1cm;
	} @else if unit($value) == "mm" {
		@return $value / 1mm;
	} @else if unit($value) == "em" {
		@return $value / 1em;
	} @else if unit($value) == "rem" {
		@return $value / 1rem;
	} @else if unit($value) == "ex" {
		@return $value / 1ex;
	} @else if unit($value) == "pt" {
		@return $value / 1pt;
	} @else if unit($value) == "pc" {
		@return $value / 1pc;
	} @else if unit($value) == "px" {
		@return $value / 1px;
	}
	@return $value;
}

@function gs-get-column-size ($grid) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$gs-column-width: null !default !global;
	$gs-site-width: null !default !global;
	$cols: gs-value($grid, $gs-column-num);
	$g: gs-gutter(1, $grid);
	$width: 0;

	@if $gs-column-width != null {
		$width: gs-value($grid, $gs-column-width);
	} @else if $gs-site-width != null {
		// ([site width] - ([gutter] * ([columns] - 1))) / [columns]
		$width: (gs-value($grid, $gs-site-width) - ($g * ($cols - 1))) / $cols;
	}
	@return $width;
}

// write a fixed (px) column based on "media" $gs-column-num
// $n:[1] number of columns (if none is passed, considers 1)
// $grid:[first defined media] the name of configured media to fetch data
// $extra:[0] extra size do be added (or removed) to the return value
@function gs-fixed-column ($n: 1, $grid: gs-value($l: $gs-labels), $extra: 0) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$width: gs-get-column-size($grid);
	$cols: gs-value($grid, $gs-column-num);
	$col-diff: $n - floor($n);
	$g: gs-gutter(1, $grid);
	@if $n > $cols {
		$n: $cols
	}

	@if $n < 1 {
		@return max((($g + $width) * floor($n)) - $g, 0) + $extra + ($width * $col-diff);
	} @else {
		@if gs-to-number($width * $col-diff) > 0 {
			$extra: $extra + ($width * $col-diff) + $g;
		}

		@return (($g + $width) * floor($n) - $g) + $extra;
	}
}

// write a fluid (%) column based on "media" $gs-column-num. No "gutter" is considered on the calculations
// $n:[1] number of columns (if none is passed, considers 1)
// $grid:[first defined media] the name of configured media to fetch data
@function gs-fluid-column ($n: 1, $grid: gs-value($l: $gs-labels)) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$cols: gs-value($grid, $gs-column-num);
	@if $n > $cols {
		$n: $cols
	}
	$width: $n / $cols * 100%; //gs-to-number(gs-value($grid, $gs-site-width))

	@return $width;
}


// PUBLIC //

// Register grid system
@mixin gs-clear-grid-list () {
	$gs-labels: null !global;
	$gs-site-width: null !global;
	$gs-column-num: null !global;
	$gs-width-break-point: null !global;
	$gs-gutter-width: null !global;
}
@mixin gs-register-grid ($label, $width, $column-num, $gutter, $break-point: auto, $column: auto) {
	$new-width: 0;
	@if $gs-first-registered == false {
		@include gs-clear-grid-list();
		$gs-first-registered: true !global;
	}
	@if gs-index-of($label, $gs-labels) < 0 {

		// if site-width is auto, column-num, gutter-width and column-width must have values
		@if $width == auto {
			@if type-of($column-num) == number {
				@if type-of($gutter) == number {
					@if type-of($column) == number {
						$width: $column-num * $column + ($column-num - 1) * $gutter;
					}
				}
			}
		}

		// if gutter or/and column-num is auto, site-width and column-width must have values;
		@if $gutter == auto or $column-num == auto {
			@if type-of($width) == number {
				@if type-of($column) == number {
					@if $column-num == auto {
						$column-num: floor($width / $column);
					}
					@if $gutter != auto  {
						$new-width: ($gutter * ($column-num - 1) + $column-num * $column);
						@if ($new-width != $width) {
							$column-num: $column-num - 1;
						}
					} @else {
						$gutter: ($width - $column * $column-num) / ($column-num - 1);
					}
				}
			}
		}

		@if $gs-labels == null {
			$gs-labels: $label !global;
			$gs-site-width: $width !global;
			$gs-column-num: $column-num !global;
			$gs-gutter-width: $gutter !global;
			$gs-width-break-point: $break-point !global;
		} @else {
			$gs-labels: append($gs-labels, $label) !global;
			$gs-site-width: append($gs-site-width, $width) !global;
			$gs-column-num: append($gs-column-num, $column-num) !global;
			$gs-gutter-width: append($gs-gutter-width, $gutter) !global;
			$gs-width-break-point: append($gs-width-break-point, $break-point) !global;
		}
	}
}

// Get gutter value
@function gs-gutter ($n: 1, $grid: gs-value($l: $gs-labels)) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	@return gs-to-number(gs-value($grid, $gs-gutter-width)) * $n * 1px;
}

// Get column value
@function gs-column ($n: 1, $grid: gs-value($l: $gs-labels), $extra: 0) {
	@if gs-label-exists($grid) == 0 {
		@return 0;
	}
	$gs-column-width: null !default !global;
	$gs-site-width: null !default !global;
	$width: 0;

	@if $n == "all" {
		$n: gs-value($grid, $gs-column-num);
	}

	@if gs-value($grid, $gs-site-width) != null {
		@if unit(gs-value($grid, $gs-site-width)) == "%" {
			@return gs-fluid-column($n, $grid);
		}
	}
	@return gs-fixed-column($n, $grid, $extra);
}

// get row css properties
@mixin gs-row ($width: auto, $grid: gs-value($l: $gs-labels)) {
	@if $width != auto {
		@if unit($width) == "%" {
			width: auto;
		} @else {
			width: $width + gs-gutter($grid: $grid);
			margin-left: gs-gutter(-1, $grid);
		}
	} @else {
		margin-left: gs-gutter(-1, $grid);
	}
}

// get media query css wrapper
@mixin gs-media-query ($grid: gs-value($l: $gs-labels), $media: screen, $type: max-width) {
	$break-point: gs-value($grid, $gs-width-break-point);
	@if $break-point == "auto" {
		@content
	} @else {
		@if gs-value($grid, $gs-width-break-point) != null {
			@media #{$media} and (#{$type}: gs-value($grid, $gs-width-break-point)) {
				@content
			}
		}
	}
}

// generates classes with sizes
@mixin gs-classes ($grid, $prefix, $push: true, $float: true) {
	$cols: gs-value($grid, $gs-column-num);
	$gutter: gs-value($grid, $gs-gutter-width);

	@include gs-media-query($grid) {
		.#{$prefix}row {
			margin-left: gs-gutter(-1, $grid);
			@if $float {
				&:after {
					content: "";
					clear: both;
					height: 0;
					overflow: hidden;
					display: block;
				}
			}
		}
		@for $i from 1 to $cols+1 {
			$curr: gs-column($i, $grid: $grid);
			.#{$prefix}col-#{$i} {
				width: $curr;
				@if unit($curr) != "%" {
					margin-left: $gutter;
				}
				@if $float {
					float: left;
				}
			}
		}
		// margins after cols to guarantee hierarchy
		@for $i from 1 to $cols+1 {
			$curr: gs-column($i, $grid: $grid);
			@if $push {
				.#{$prefix}push-prev-#{$i} {
					@if unit($curr) != "%" {
						margin-left: $curr + gs-gutter(2, $grid);
					} @else {
						margin-left: $curr;
					}
				}
				.#{$prefix}push-next-#{$i} {
					@if unit($curr) != "%" {
						margin-right: $curr + gs-gutter(1, $grid);
					} @else {
						margin-right: $curr;
					}
				}
			}
		}
	}
}