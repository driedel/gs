{{#include}}
	{{{partials}}}/gl-content-head.mustache
{{/include}}

<!--
	// Basic usage //
-->
<h2 id="Basic-usage" class="gl-header">Basic usage</h2>

<p class="gl">
	Examples using functions and mixins directly on SASS. Considering that all examples below wil usse this registered grids.
</p>

<!--
	// Registering grids //
-->
<h3 id="Registering-grids" class="gl">Registering grids</h3>
<p class="gl">
	Example of generated grids calculation when registering them. This elements are just created as a test purpose, just to show the values registered reflected on a visual platform. This gridsystem won't make any box modelling, so it won't place any <code class="gl">float</code>, <code class="gl">inline-block</code>, etc.
</p>

<p class="gl">
	This example will register a 2 column flexible grid with 10px gutter:
</p>
<div class="gl-example">
	<div class="gl-mobile-grid">
		{{#data.grids.mobile}}
		<div class="gl-row">
			{{#.}}
				<div class="gl-col{{{.}}}">
					<div class="gl-content"></div>
				</div>
			{{/.}}
		</div>
		{{/data.grids.mobile}}
	</div>
</div>
<pre class="gl"><code class="scss">@include gs-register-grid( "mobile", 100%, 2, 10px);</code></pre>
<p class="gl-legend">Note that gutter will only be used as a variable. It won't be calculated together with the columns.</p>

<p class="gl">
	Next grid will be registered as a fixed 12 column with 974px and 10px gutter:
</p>
<div class="gl-example">
	<div class="gl-desktop-grid">
		{{#data.grids.desktop}}
		<div class="gl-row">
			{{#.}}
				<div class="gl-col{{{.}}}">
					<div class="gl-content"></div>
				</div>
			{{/.}}
		</div>
		{{/data.grids.desktop}}
	</div>
</div>
<pre class="gl"><code class="scss">@include gs-register-grid( "desktop", 974px, 12, 10px);</code></pre>

<p class="gl">
	Next grid will be registered as a fixed 12 column with 1190px and 10px gutter:
</p>
<div class="gl-example">
	<div class="gl-wide-grid">
		{{#data.grids.wide}}
		<div class="gl-row">
			{{#.}}
				<div class="gl-col{{{.}}}">
					<div class="gl-content"></div>
				</div>
			{{/.}}
		</div>
		{{/data.grids.wide}}
	</div>
</div>
<pre class="gl"><code class="scss">@include gs-register-grid( "wide", 1190px, 12, 10px);</code></pre>

<!--
	// Columns and gutters //
-->
<h3 id="Columns-and-gutters" class="gl">Columns and gutters</h3>
<p class="gl">
	Use <code class="gl">gs-column()</code> to get column values. Next example shows a simple implementation of column:
</p>
<p class="gl">
	1 column from previously registered <code class="gl">mobile</code> grid:
</p>
<div class="gl-example">
	<div class="example-mobile">
		50% large
	</div>
</div>
<pre class="gl"><code class="scss">.example-mobile { width: gs-column(1, "mobile"); }</code></pre>
<pre class="gl"><code class="scss">&lt;div class=&quot;example-mobile&quot;&gt; I'm 50% large &lt;/div&gt;</code></pre>

<p class="gl">
	1 column from previously registered <code class="gl">desktop</code> grid:
</p>
<div class="gl-example">
	<div class="example-desktop">
		66px large
	</div>
</div>
<pre class="gl"><code class="scss">.example-desktop { width: gs-column(1, "desktop"); }</code></pre>
<pre class="gl"><code class="scss">&lt;div class=&quot;example-desktop&quot;&gt; I have 66px &lt;/div&gt;</code></pre>

<!--
	// Box modelling and extra values //
-->
<h4 id="Box-modelling-and-extra-values" class="gl">Box modelling and extra values</h4>

<p class="gl">
	It's possible to add an extra value to <code class="gl">gs-column()</code>. For example, use <code class="gl">gs-gutter()</code> do get gutter value for specific grid:
</p>
<div class="gl-example example-side-extra">
	<div class="example-wrapper">
		<div class="example-3">
			3 columns
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-3-gutter">
			3 columns + gutter
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>
<pre class="gl"><code>.example-3 {
  <strong class="gl-note-1">float: left;</strong>
  width: gs-column(3, "desktop", gs-gutter(1, "desktop")<strong class="gl-note-2"></strong>);
}
.example-3-gutter {
  float: left;
  width: gs-column(3, "desktop");
  margin-right: gs-gutter(1, "desktop");
}
.example-auto {
  <strong class="gl-note-3">overflow: hidden;</strong>
  margin: 0;
}</code></pre>
<pre class="gl"><code>&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-3&quot;&gt; 3 columns &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-3-gutter&quot;&gt; 3 columns + gutter &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;</code></pre>
<ol class="gl">
	<li>
		Just example show that the box-modelling is made by the developer;
	</li>
	<li>
		This will return the gutter value registered for <code class="gl">desktop</code> grid;
	</li>
	<li>
		Example to show that the developer has the freedom to use the desired technique, in this case, having a fluid element instead of setting "9 columns".
	</li>
</ol>

<!--
	// Mixins //
-->
<h2 id="Mixins" class="gl-header">Mixins</h2>
<p class="gl">
	There are some mixins that can be used to help on box modelling, responsive lay-outs and generation of classes.
</p>

<!--
	// Rows //
-->
<h3 id="Rows" class="gl">Rows</h3>
<p class="gl">
	For continuous lists, such as product lists, there's a mixin called <code class="gl">gs-row</code> that will apply a negative gutter to the element and a fixed width, if necessary.
</p>
<p class="gl">
	The example below shows a list with 3 columns per item with a holder with a fixed-width of the full <code class="gl">desktop</code> grid. It's possible to hover to check that the element <code class="gl">ul</code> is with a negative margin and each <code class="gl">li</code> have a positive margin, giving the impression of gutters only between the elements:
</p>
<div class="gl-example example-row">
	<ul class="example-list">
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
		<li> item </li>
	</ul>
</div>
<pre class="gl"><code>.example-list {
  @include gs-row(gs-column(all, "desktop"), "desktop");
  > li {
    width: gs-column(3, "desktop");
    margin-left: gs-gutter(1, "desktop");
  }
}
</code></pre>
<pre class="gl"><code>&lt;ul class=&quot;example-list&quot;&gt;
  &lt;li&gt; item &lt;/li&gt;
  ...
&lt;/ul&gt;</code></pre>
<p class="gl-legend">Note that the example is ignoring the box modelling to make the gridsystem implementation clearer.</p>

<!--
	// Media queries //
-->
<h3 id="Media-queries" class="gl">Media queries</h3>
<p class="gl">
	The mixin <code class="gl">gs-media-query</code> can be used when aplying media queries directly inside CSS output:
</p>
<pre class="gl"><code>@include gs-media-query("desktop") {
  .example-class {
    width: gs-column(2, "desktop");
    padding-right: gs-gutter(1, "desktop");
  }
}</code></pre>
<p class="gl">
	Will output into:
</p>
<pre class="gl"><code>@media screen and (max-width: 974px) {
  .example-class {
    width: 154px;
    padding-right: 10px;
  }
}</code></pre>

<p class="gl">
	For now that's a very simple implementation that only allow to change <code class="gl">$media</code> and switch between <code class="gl">max-width</code> and <code class="gl">min-width</code> using <code class="gl">$type</code> parameter.
</p>
<pre class="gl"><code>@include gs-media-query("desktop", "screen", "min-width") {
  .example-class {
    width: gs-column(2, "desktop");
    padding-right: gs-gutter(1, "desktop");
  }
}</code></pre>
<p class="gl">
	This will just change the <code class="gl">max-width</code> to <code class="gl">min-width</code>:
</p>
<pre class="gl"><code>@media screen and (min-width: 974px) {
  .example-class {
    width: 154px;
    padding-right: 10px;
  }
}</code></pre>
<div class="gl-callout-important">
	<p>
		The <code class="gl">$break-point</code> parameter inside <code class="gl">gs-register-grid</code> will just be used on this mixin. If the project will use media queries on HTML tag <code class="gl">link</code>, this can be ommited.
	</p>
</div>

<!--
	// Generating classes //
-->
<h3 id="Generating-classes" class="gl">Generating classes</h3>
<p class="gl">
	It's possible to generate classes bases on a previously registered grid. For now, there's 2 types of classes that it generates: <code class="gl">row</code> (for wrappers), <code class="gl">col</code> (with width) and <code class="gl">push</code> (with margin-left and margin-right).
</p>
<div class="gl-example example-classes">
	<div class="d-row">
		<div class="d-col-12"> 12 cols </div>
	</div>
	<div class="d-row">
		<div class="d-col-1"> 1 col </div>
		<div class="d-col-11"> 11 cols </div>
	</div>
	<div class="d-row">
		<div class="d-col-2"> 2 cols </div>
		<div class="d-col-10"> 10 cols</div>
	</div>
	<div class="d-row">
		<div class="d-col-3"> 3 cols </div>
		<div class="d-col-9"> 9 cols </div>
	</div>
	<div class="d-row">
		<div class="d-col-4"> 4 cols </div>
		<div class="d-col-8"> 8 cols </div>
	</div>
	<div class="d-row">
		<div class="d-col-5"> 5 cols </div>
		<div class="d-col-7"> 7 cols </div>
	</div>
	<div class="d-row">
		<div class="d-col-6"> 6 cols </div>
		<div class="d-col-6"> 6 cols </div>
	</div>
</div>
<pre class="gl"><code>@include gs-classes("desktop", "d-");</code></pre>
<p class="gl-legend">Note that <code class="gl">d-</code> will be used as the class prefix.</p>
<pre class="gl"><code>&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-12&quot;&gt; 12 cols &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-1&quot;&gt; 1 col &lt;/div&gt;
  &lt;div class=&quot;d-col-11&quot;&gt; 11 cols &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-2&quot;&gt; 2 cols &lt;/div&gt;
  &lt;div class=&quot;d-col-10&quot;&gt; 10 cols&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-3&quot;&gt; 3 cols &lt;/div&gt;
  &lt;div class=&quot;d-col-9&quot;&gt; 9 cols &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-4&quot;&gt; 4 cols &lt;/div&gt;
  &lt;div class=&quot;d-col-8&quot;&gt; 8 cols &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-5&quot;&gt; 5 cols &lt;/div&gt;
  &lt;div class=&quot;d-col-7&quot;&gt; 7 cols &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-6&quot;&gt; 6 cols &lt;/div&gt;
  &lt;div class=&quot;d-col-6&quot;&gt; 6 cols &lt;/div&gt;
&lt;/div&gt;</code></pre>
<div class="gl-callout-important">
	<p>
		By default, classes are generated width, margin and float techniques. It's possible to pass a <code class="gl">$float: false</code> parameter and only width and margin will be applied. Eg.: <code class="gl">@include gs-classes("desktop", "d-", $float: false);</code>, in this case all positioning needs to be configured manually.
	</p>
</div>
<p class="gl">
	It's also possible to use spacing classes. Considering the registration on the above example, spacing left would be made as:
</p>
<div class="gl-example example-classes">
	<div class="d-row">
		<div class="d-col-12"> 12 cols </div>
	</div>
	<div class="d-row">
		<div class="d-col-11 d-push-prev-1"> 11 cols <em>push prev 1</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-10 d-push-prev-2"> 10 cols <em>push prev 2</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-9 d-push-prev-3"> 9 cols <em>push prev 3</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-8 d-push-prev-4"> 8 cols <em>push prev 4</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-7 d-push-prev-5"> 7 cols <em>push prev 5</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-6 d-push-prev-6"> 6 cols <em>push prev 6</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-5 d-push-prev-7"> 5 cols <em>push prev 7</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-4 d-push-prev-8"> 4 cols <em>push prev 8</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-3 d-push-prev-9"> 3 cols <em>push prev 9</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-2 d-push-prev-10"> 2 cols <em>push prev 10</em> </div>
	</div>
	<div class="d-row">
		<div class="d-col-1 d-push-prev-11"> 1 col <em>push prev 11</em> </div>
	</div>
</div>
<pre class="gl"><code>&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-12&quot;&gt; 12 cols &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-11 d-push-prev-1&quot;&gt; 11 cols &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-10 d-push-prev-2&quot;&gt; 10 cols &lt;/div&gt;
&lt;/div&gt;
... go on "d-push-prev-3", d-push-prev-4"...
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-1 d-push-prev-11&quot;&gt; 1 col &lt;/div&gt;
&lt;/div&gt;</code></pre>

<p class="gl">
	And spacing it to the right:
</p>

<div class="gl-example example-classes example-next">
	<div class="d-row">
		<div class="d-col-1 d-push-next-10"> 1 col <em>push next 10</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-2 d-push-next-9"> 2 cols <em>push next 9</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-3 d-push-next-8"> 3 cols <em>push next 8</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-4 d-push-next-7"> 4 cols <em>push next 7</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-5 d-push-next-6"> 5 cols <em>push next 6</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-6 d-push-next-5"> 6 cols <em>push next 5</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-7 d-push-next-4"> 7 cols <em>push next 4</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-8 d-push-next-3"> 8 cols <em>push next 3</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-9 d-push-next-2"> 9 cols <em>push next 2</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-10 d-push-next-1"> 10 cols <em>push next 1</em> </div>
		<div class="d-col-1"> 1 col </div>
	</div>
	<div class="d-row">
		<div class="d-col-12"> 12 cols </div>
	</div>
</div>
<pre class="gl"><code>&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-1 d-push-next-10&quot;&gt; 1 col &lt;/div&gt;
  &lt;div class=&quot;d-col-1&quot;&gt; 1 col &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-2 d-push-next-9&quot;&gt; 2 cols &lt;/div&gt;
  &lt;div class=&quot;d-col-1&quot;&gt; 1 col &lt;/div&gt;
&lt;/div&gt;
... go on with "d-push-next-8", "d-push-next-7"...
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-10 d-push-next-1&quot;&gt; 10 cols &lt;/div&gt;
  &lt;div class=&quot;d-col-1&quot;&gt; 1 col &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-row&quot;&gt;
  &lt;div class=&quot;d-col-12&quot;&gt; 12 cols &lt;/div&gt;
&lt;/div&gt;</code></pre>

<!--
	// Advanced usage //
-->
<h2 id="Advanced-usage" class="gl-header">Advanced usage</h2>

<!--
	// Fractionated values //
-->
<h3 id="Fractionated-values" class="gl">Fractionated values</h3>
<p class="gl">
	It's also possible to add fractionated columns if there's any need to do so. Example below with 1/2 column:
</p>
<div class="gl-example example-side-fractal">
	<div class="example-wrapper">
		<div class="example-1">
			1 col
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-2">
			½
		</div>
		<div class="example-1-2">
			½
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>
<pre class="gl"><code>.example-1 { width: gs-column(1, "desktop"); }
.example-1-2 { width: gs-column(1/2, "desktop"); }</code></pre>
<pre class="gl"><code>&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1&quot;&gt; 1 col &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-2&quot;&gt; &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-1-2&quot;&gt; &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p class="gl">
	And the example below with 1/3 columns:
</p>

<div class="gl-example example-side-fractal">
	<div class="example-wrapper">
		<div class="example-1">
			⅓
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-3">
			⅓
		</div>
		<div class="example-1-3">
			⅓
		</div>
		<div class="example-1-3">
			⅓
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>
<pre class="gl"><code>.example-1 { width: gs-column(1, "desktop"); }
.example-1-3 { width: gs-column(1/3, "desktop"); }</code></pre>
<pre class="gl"><code>&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1&quot;&gt; ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-3&quot;&gt; ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-1-3&quot;&gt; ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-1-3&quot;&gt; ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="gl-callout-important">
	<h3>Important</h3>
	<p>
		Only use fractionated columns if your columns are divisible by the values you are trying to get. Usually grids have columns divisible by 2 and 3, so in this case only <code class="gl">1/2</code>, <code class="gl">1/3</code> and <code class="gl">2/3</code>.
	</p>
</div>

<p class="gl">
	Note that fractional values ignore gutter inside the columns. Follow the rule for columns with numbers divisible by 2 and 3. So 1 column + 1/3 will consider the gutter between the 2 columns, but the next should be fluid or fractal too:
</p>

<div class="gl-example example-side-fractal">
	<div class="example-wrapper">
		<div class="example-1"> 1 col </div>
		<div class="example-1-2"> ½ </div>
		<div class="example-1-2"> ½ </div>
		<div class="example-1"> 1 col </div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-1-2">
			1 + ½
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-1-2">
			1 + ½
		</div>
		<div class="example-1-1-2">
			1 + ½
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>
<pre class="gl"><code>.example-1 { width: gs-column(1, "desktop"); }
.example-1-2 { width: gs-column(1/2, "desktop"); }
.example-1-1-2 { width: gs-column(1 + 1/2, "desktop"); }</code></pre>
<pre class="gl"><code>&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1&quot;&gt; 1 col &lt;/div&gt;
  &lt;div class=&quot;example-1-2&quot;&gt; &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-1-2&quot;&gt; &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-1&quot;&gt; 1 col &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-1-2&quot;&gt; 1 + &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-1-2&quot;&gt; 1 + &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-1-1-2&quot;&gt; 1 + &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="gl-example example-side-fractal">
	<div class="example-wrapper">
		<div class="example-1"> 1 col </div>
		<div class="example-1-3"> ⅓ </div>
		<div class="example-1-3"> ⅓ </div>
		<div class="example-1-3"> ⅓ </div>
		<div class="example-1"> 1 col </div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-1-3">
			1 + ⅓
		</div>
		<div class="example-1-2-3">
			1 + ⅔
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-1-3">
			1 + ⅓
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-2-3">
			1 + ⅔
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>
<pre class="gl"><code>.example-1 { width: gs-column(1, "desktop"); }
.example-1-3 { width: gs-column(1/3, "desktop"); }
.example-1-1-3 { width: gs-column(1 + 1/3, "desktop"); }
.example-1-2-3 { width: gs-column(1 + 2/3, "desktop"); }</code></pre>
<pre class="gl"><code>&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1&quot;&gt; 1 col &lt;/div&gt;
  &lt;div class=&quot;example-1-3&quot;&gt; ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-1-3&quot;&gt; ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-1-3&quot;&gt; ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-1&quot;&gt; 1 col &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-1-3&quot;&gt; 1 + ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-1-2-3&quot;&gt; 1 + ⅔ &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-1-3&quot;&gt; 1 + ⅓ &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-2-3&quot;&gt; 1 + ⅔ &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width &quot;auto&quot;. &lt;/div&gt;
&lt;/div&gt;</code></pre>