{{#include}}
	{{{partials}}}/gl-content-head.mustache
{{/include}}

<!--
	// Basic usage //
-->
<h2 id="Basic-usage" class="gl-header">Basic usage</h2>

<p class="gl">
	Examples using functions and mixins directly on SASS. Considering that all examples below wil usse this registered grids.
</p>

<!--
	// Registering grids //
-->
<h3 id="Registering-grids" class="gl">Registering grids</h3>
<p class="gl">
	Example of generated grids calculation when registering them. This elements are just created as a test purpose, just to show the values registered reflected on a visual platform. This gridsystem won't make any box modelling, so it won't place any <code class="gl">float</code>, <code class="gl">inline-block</code>, etc.
</p>

<p class="gl">
	This example will register a 2 column flexible grid with 10px gutter:
</p>
<div class="gl-example">
	<div class="gl-mobile-grid">
		{{#data.grids.mobile}}
		<div class="gl-row">
			{{#.}}
				<div class="gl-col{{{.}}}">
					<div class="gl-content"></div>
				</div>
			{{/.}}
		</div>
		{{/data.grids.mobile}}
	</div>
</div>
<pre class="gl"><code class="scss">@include gs-register-grid( "mobile", 100%, 2, 10px);</code></pre>
<p class="gl-legend">Note that gutter will only be used as a variable. It won't be calculated together with the columns.</p>

<p class="gl">
	Next grid will be registered as a fixed 12 column with 974px and 10px gutter:
</p>
<div class="gl-example">
	<div class="gl-desktop-grid">
		{{#data.grids.desktop}}
		<div class="gl-row">
			{{#.}}
				<div class="gl-col{{{.}}}">
					<div class="gl-content"></div>
				</div>
			{{/.}}
		</div>
		{{/data.grids.desktop}}
	</div>
</div>
<pre class="gl"><code class="scss">@include gs-register-grid( "desktop", 974px, 12, 10px);</code></pre>

<p class="gl">
	Next grid will be registered as a fixed 12 column with 1190px and 10px gutter:
</p>
<div class="gl-example">
	<div class="gl-wide-grid">
		{{#data.grids.wide}}
		<div class="gl-row">
			{{#.}}
				<div class="gl-col{{{.}}}">
					<div class="gl-content"></div>
				</div>
			{{/.}}
		</div>
		{{/data.grids.wide}}
	</div>
</div>
<pre class="gl"><code class="scss">@include gs-register-grid( "wide", 1190px, 12, 10px);</code></pre>

<!--
	// Columns and gutters //
-->
<h3 id="Columns-and-gutters" class="gl">Columns and gutters</h3>
<p class="gl">
	Use <code class="gl">gs-column()</code> to get column values. Next example shows a simple implementation of column:
</p>
<p class="gl">
	1 column from previously registered <code class="gl">mobile</code> grid:
</p>
<div class="gl-example">
	<div class="example-mobile">
		50% large
	</div>
</div>
<pre class="gl"><code class="scss">.example-mobile { width: gs-column(1, "mobile"); }</code></pre>
<pre class="gl"><code class="scss">&lt;div class=&quot;example-mobile&quot;&gt; I'm 50% large &lt;/div&gt;</code></pre>

<p class="gl">
	1 column from previously registered <code class="gl">desktop</code> grid:
</p>
<div class="gl-example">
	<div class="example-desktop">
		66px large
	</div>
</div>
<pre class="gl"><code class="scss">.example-desktop { width: gs-column(1, "desktop"); }</code></pre>
<pre class="gl"><code class="scss">&lt;div class=&quot;example-desktop&quot;&gt; I have 66px &lt;/div&gt;</code></pre>

<!--
	// Box modelling and extra values //
-->
<h4 id="Box-modelling-and-extra-values" class="gl">Box modelling and extra values</h4>

<p class="gl">
	It's possible to add an extra value to <code class="gl">gs-column()</code>. For example, use <code class="gl">gs-gutter()</code> do get gutter value for specific grid:
</p>
<div class="gl-example example-side-extra">
	<div class="example-wrapper">
		<div class="example-3">
			3 columns
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-3-gutter">
			3 columns + gutter
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>
<pre class="gl"><code>.example-3 {
  <strong class="gl-note-1">float: left;</strong>
  width: gs-column(3, "desktop", gs-gutter(1, "desktop")<strong class="gl-note-2"></strong>);
}
.example-3-gutter {
  float: left;
  width: gs-column(3, "desktop");
  margin-right: gs-gutter(1, "desktop");
}
.example-auto {
  <strong class="gl-note-3">overflow: hidden;</strong>
  margin: 0;
}</code></pre>
<pre class="gl"><code>&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-3&quot;&gt; 3 columns &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-3-gutter&quot;&gt; 3 columns + gutter &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;</code></pre>
<ol class="gl">
	<li>
		Just example show that the box-modelling is made by the developer;
	</li>
	<li>
		This will return the gutter value registered for <code class="gl">desktop</code> grid;
	</li>
	<li>
		Example to show that the developer has the freedom to use the desired technique, in this case, having a fluid element instead of setting "9 columns".
	</li>
</ol>

<!--
	// Fractionated values //
-->
<h4 id="Fractionated-values" class="gl">Fractionated values</h4>
<p class="gl">
	It's also possible to add fractionated columns if there's any need to do so:
</p>
<div class="gl-example example-side-half-extra">
	<div class="example-wrapper">
		<div class="example-1">
			1 column
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1-2">
			½
		</div>
		<div class="example-1-2">
			½
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>
<pre class="gl"><code>.example-1 {
  width: gs-column(1, "desktop");
}
.example-1-2 {
  width: gs-column(1/2, "desktop");
}</code></pre>
<pre class="gl"><code>&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1&quot;&gt; 1 column &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;example-wrapper&quot;&gt;
  &lt;div class=&quot;example-1-2&quot;&gt; &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-1-2&quot;&gt; &frac12; &lt;/div&gt;
  &lt;div class=&quot;example-auto&quot;&gt; I'm width "auto". &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<div class="gl-example example-side-half-extra">
	<div class="example-wrapper">
		<div class="example-1-3">
			⅓
		</div>
		<div class="example-1-3">
			⅓
		</div>
		<div class="example-1-3">
			⅓
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-3">
			3
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-3-1-3">
			3 + ⅓
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1"> 1 col </div>
		<div class="example-1"> 1 col </div>
		<div class="example-1"> 1 col </div>
		<div class="example-1-3"> ⅓ </div>
		<div class="example-1-3"> ⅓ </div>
		<div class="example-1-3"> ⅓ </div>
		<div class="example-1"> 1 col </div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-3-2-3">
			3 + ⅔
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-3-1-2">
			3 + ½
		</div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
	<div class="example-wrapper">
		<div class="example-1"> 1 col </div>
		<div class="example-1"> 1 col </div>
		<div class="example-1"> 1 col </div>
		<div class="example-1-2"> ½ </div>
		<div class="example-1-2"> ½ </div>
		<div class="example-1"> 1 col </div>
		<div class="example-auto">
			I'm width "auto".
		</div>
	</div>
</div>